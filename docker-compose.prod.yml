version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: elektromeistras-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - elektromeistras-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: elektromeistras-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - elektromeistras-network
    restart: always

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: elektromeistras-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    networks:
      - elektromeistras-network
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: elektromeistras-backend-prod
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    networks:
      - elektromeistras-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: elektromeistras-frontend-prod
    environment:
      VITE_API_URL: ${API_URL}
    depends_on:
      - backend
    networks:
      - elektromeistras-network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: elektromeistras-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - elektromeistras-network
    restart: always

volumes:
  postgres_data_prod:
  redis_data_prod:
  elasticsearch_data_prod:

networks:
  elektromeistras-network:
    driver: bridge
