version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: elektromeistras-postgres
    environment:
      POSTGRES_DB: elektromeistras
      POSTGRES_USER: elektromeistras
      POSTGRES_PASSWORD: elektromeistras
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elektromeistras"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elektromeistras-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: elektromeistras-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elektromeistras-network

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: elektromeistras-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elektromeistras-network

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: elektromeistras-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: elektromeistras
      DB_USERNAME: elektromeistras
      DB_PASSWORD: elektromeistras
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: ${JWT_SECRET:-elektromeistras-super-secret-key-change-in-production}
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - elektromeistras-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: elektromeistras-frontend
    environment:
      VITE_API_URL: http://localhost:8080/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - elektromeistras-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  elektromeistras-network:
    driver: bridge
